
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <style>


        .chartCard {
            width: 100vw;
            height: calc(100vh - 40px);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chartBox {
            width: 700px;
            padding: 20px;
            border-radius: 20px;
            border: solid 3px rgba(54, 162, 235, 1);
            background: white;
        }

            .chartBox viewBtn {
                color: black;
                border: 1px solid white;
            }
    </style>
</head>
<body>
    <div class="container">
        <div class="info mt-5">
        </div>
        <div class="row">
            <div class="chartCard">
                <div class="chartBox">
                    <button type="button" style="background: #78C1F3; border: 1px solid white;" class="btn viewBtn">Result</button>
                    <button type="button" style="background: #F2EAD3; border: 1px solid white;" class="btn viewBtn">Remain</button>
                    <br />
                    <strong class="mt-2" id="Universal"></strong>
                    <canvas id="myChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</body>
</html>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="text/javascript" src="https://unpkg.com/chartjs-chart-venn@3.6.0/build/index.umd.min.js"></script>
<script src="~/Scripts/jquery-3.4.1.min.js"></script>


<script>
    var sets = [];

    $(document).ready(function () {
        
            $.ajax({
                type: "Get",
                url: '@Url.Action("DynamicTable", "Home")',
                /*data: JSON.stringify({ a: a, b: b }),*/
                contentType: 'application/json',
                success: function (db) {
                    sets = db;
                    ShowVenn();

                },
            });
    });



    function ShowVenn() {



        var colors = [] //0:A . 1:B , 2:C
        var remainArea = "#F2EAD3";
        var outputArea = "#78C1F3";
        var arr = [];



        var c1 = { label: 'A', values: sets.A }
        var c2 = { label: 'B', values: sets.B }
        var c3 = { label: 'C', values: sets.C }
        arr.push(c1);
        arr.push(c2);
        arr.push(c3);


       
        var result = sets.Result[sets.Result.length - 1].split(",");
        let foundA = sets.Diff1.every(r => result.includes(r))
        let foundB = sets.Diff2.every(r => result.includes(r))
        let foundC = sets.Diff3.every(r => result.includes(r))
        let foundInt1 = sets.Intersection1.every(r => result.includes(r))
        let foundInt2 = sets.Intersection2.every(r => result.includes(r))
        let foundInt3 = sets.Intersection3.every(r => result.includes(r))
        let foundInt4 = sets.Intersection4.every(r => result.includes(r))

        if (sets.Intersection1.length == 0) {
            foundInt1 = false;
        }
        if (sets.Intersection2.length == 0) {
            foundInt2 = false;
        }
        if (sets.Intersection3.length == 0) {
            foundInt3 = false;
        }
        if (sets.Intersection4.length == 0) {
            foundInt4 = false;
        }
        if (sets.Diff1.length == 0) {
            foundA = false;
        }
        if (sets.Diff2.length == 0) {
            foundB = false;
        }
        if (sets.Diff3.length == 0) {
            foundC = false;
        }


        if (foundA) {  //Check A
            colors.push(outputArea);
            //alert("A: " + foundA);
        }
        else {
            colors.push(remainArea);
            //alert("A: " + foundA);
        }

        if (foundB) {  //Check B
            colors.push(outputArea);
            //alert("B: " + foundB);
        }
        else {
            colors.push(remainArea);
            //alert("B: " + foundB);
        }

        if (foundC) {  //Check C
            colors.push(outputArea);
            //alert("C: " + foundC);
        }
        else {
            colors.push(remainArea);
            //alert("C: " + foundC);
        }

        if (foundInt1) {  //Check AnB
            colors.push(outputArea);
            //alert("AnB: " + foundInt1);
        }
        else {
            colors.push(remainArea);
            //alert("AnB: " + foundInt1);
        }

        if (foundInt2) {  //Check AnC
            colors.push(outputArea);
            //alert("AnC: " + foundInt2);
        }
        else {
            colors.push(remainArea);
            //alert("AnC: " + foundInt2);
        }

        if (foundInt4) {  //Check BnC
            colors.push(outputArea);
            //alert("BnC: " + foundInt4);
        }
        else {
            colors.push(remainArea);
            //alert("BnC: " + foundInt4);
        }

        if (foundInt3) {  //Check (AnB)nC
            colors.push(outputArea);
            //alert("AnBnC: " + foundInt3);
        }
        else {
            colors.push(remainArea);
            //alert("AnBnC: " + foundInt3);
        }



        let data = ChartVenn.extractSets(
            arr
        );

     

        // config
        const config = {
            type: 'venn',
            data,
            options: {
                borderColor: [
                    'rgba(255, 26, 104, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(0, 0, 0, 1)'
                ],
                backgroundColor: [

                    colors[0], //A
                    colors[1], //B
                    colors[2], //C
                    colors[3], //AnB
                    colors[4], //AnC
                    colors[5], // BnC
                    colors[6], //(AnB)nC

    
                ],
                color: [
                    /*'#FFFFFF',*/
                ],
                borderWidth: 1

            }
        };

        // render init block
        const myChart = new Chart(
            document.getElementById('myChart'),
            config
        );

        // Instantly assign Chart.js version
        const chartVersion = document.getElementById('chartVersion');
        chartVersion.innerText = Chart.version;




    };


</script>
